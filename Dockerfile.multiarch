# Multi-Architecture Dockerfile
# Supports both AMD64 and ARM64 architectures with automatic detection

# 前端构建阶段
FROM --platform=$BUILDPLATFORM node:18-alpine AS frontend-builder

# 设置构建参数
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETARCH
ARG NPM_REGISTRY=https://registry.npmjs.org/

# 显示构建信息
RUN echo "Building for platform: $TARGETPLATFORM on $BUILDPLATFORM"
RUN echo "Target architecture: $TARGETARCH"

# 安装系统依赖
RUN apk add --no-cache \
    libc6-compat \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# 配置 npm 镜像源
RUN npm config set registry $NPM_REGISTRY
RUN npm config set target_arch $TARGETARCH
RUN npm config set target_platform linux

# 复制 package 文件
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# 安装依赖
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile --production=false; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# 复制源代码
COPY . .

# 设置构建环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV GENERATE_SOURCEMAP=false

# 构建前端应用
RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# 后端构建阶段
FROM --platform=$BUILDPLATFORM golang:1.21-alpine AS backend-builder

# 设置构建参数
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETARCH
ARG TARGETOS

# 显示构建信息
RUN echo "Building Go backend for: $TARGETOS/$TARGETARCH on $BUILDPLATFORM"

# 设置 Go 环境变量
ENV GOPROXY=https://goproxy.cn,direct
ENV CGO_ENABLED=0
ENV GOOS=$TARGETOS
ENV GOARCH=$TARGETARCH

# 安装构建依赖
RUN apk add --no-cache git ca-certificates tzdata

WORKDIR /app/backend

# 复制 Go 模块文件
COPY backend/go.mod backend/go.sum ./

# 下载依赖
RUN go mod download && go mod verify

# 复制源代码
COPY backend/ .

# 构建后端二进制文件
RUN go build -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -o main .

# 生产运行阶段
FROM --platform=$TARGETPLATFORM node:18-alpine AS runner

# 设置构建参数
ARG TARGETPLATFORM
ARG TARGETARCH

# 显示运行时信息
RUN echo "Running on platform: $TARGETPLATFORM"
RUN echo "Architecture: $TARGETARCH"

# 安装运行时依赖
RUN apk add --no-cache \
    curl \
    bash \
    dumb-init \
    ca-certificates \
    tzdata \
    && rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai

WORKDIR /app

# 创建非 root 用户
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 复制前端构建产物
COPY --from=frontend-builder /app/public ./public
COPY --from=frontend-builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=frontend-builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# 复制后端二进制文件
COPY --from=backend-builder /app/backend/main ./backend/
RUN chmod +x ./backend/main

# 复制启动脚本
COPY start-multiarch.sh ./
RUN chmod +x start-multiarch.sh

# 创建必要的目录
RUN mkdir -p /app/uploads /app/mibs /var/log/mibweb && \
    chown -R nextjs:nodejs /app /var/log/mibweb

# 切换到非 root 用户
USER nextjs

# 暴露端口
EXPOSE 3000 8080

# 设置健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# 启动应用
CMD ["dumb-init", "./start-multiarch.sh"]

# 添加标签
LABEL maintainer="MIB Web Platform Team" \
      version="1.0.0" \
      description="Multi-Architecture MIB Web Platform" \
      org.opencontainers.image.title="MIB Web Platform" \
      org.opencontainers.image.description="Professional enterprise-grade SNMP MIB management platform with multi-architecture support" \
      org.opencontainers.image.vendor="MIB Web Platform" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.architecture="$TARGETARCH"