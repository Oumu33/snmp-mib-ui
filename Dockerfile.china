# 使用阿里云 Node.js 镜像
FROM registry.cn-hangzhou.aliyuncs.com/library/node:18-alpine AS base

# 设置国内 Alpine 镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装系统依赖
RUN apk add --no-cache \
    libc6-compat \
    curl \
    bash \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# 配置 npm 国内源
RUN npm config set registry https://registry.npmmirror.com && \
    npm config set disturl https://npmmirror.com/dist && \
    npm config set electron_mirror https://npmmirror.com/mirrors/electron/ && \
    npm config set sass_binary_site https://npmmirror.com/mirrors/node-sass/ && \
    npm config set phantomjs_cdnurl https://npmmirror.com/mirrors/phantomjs/ && \
    npm config set chromedriver_cdnurl https://npmmirror.com/mirrors/chromedriver/ && \
    npm config set operadriver_cdnurl https://npmmirror.com/mirrors/operadriver/ && \
    npm config set fse_binary_host_mirror https://npmmirror.com/mirrors/fsevents

# 安装依赖阶段
FROM base AS deps

# 复制包管理文件
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# 安装前端依赖（增加超时时间和重试机制）
RUN if [ -f yarn.lock ]; then \
        yarn config set registry https://registry.npmmirror.com && \
        yarn config set network-timeout 300000 && \
        yarn install --frozen-lockfile --network-timeout 300000; \
    elif [ -f package-lock.json ]; then \
        npm ci --registry=https://registry.npmmirror.com --network-timeout=300000 --maxsockets=1; \
    elif [ -f pnpm-lock.yaml ]; then \
        corepack enable pnpm && \
        pnpm config set registry https://registry.npmmirror.com && \
        pnpm config set network-timeout 300000 && \
        pnpm i --frozen-lockfile; \
    else \
        echo "Lockfile not found." && exit 1; \
    fi

# 构建阶段
FROM base AS builder
WORKDIR /app

# 复制依赖
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# 设置构建环境变量
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NODE_ENV=production

# 构建前端应用
RUN npm run build

# Go 构建阶段
FROM registry.cn-hangzhou.aliyuncs.com/library/golang:1.21-alpine AS go-builder

# 设置国内 Alpine 镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装 Git（Go 模块可能需要）
RUN apk add --no-cache git

# 设置 Go 代理为国内源
ENV GOPROXY=https://goproxy.cn,direct
ENV GOSUMDB=sum.golang.google.cn
ENV GO111MODULE=on

WORKDIR /app/backend

# 复制 Go 模块文件
COPY backend/go.mod backend/go.sum ./

# 下载依赖
RUN go mod download

# 复制源代码
COPY backend/ .

# 构建后端二进制文件 (支持多架构)
RUN CGO_ENABLED=0 GOOS=linux go build \
    -a -installsuffix cgo \
    -ldflags '-w -s' \
    -o main .
# Note: GOARCH is automatically set by Docker buildx based on target platform

# 生产运行阶段
FROM registry.cn-hangzhou.aliyuncs.com/library/node:18-alpine AS runner

# 设置国内 Alpine 镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装运行时依赖
RUN apk add --no-cache \
    curl \
    bash \
    dumb-init \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# 创建非 root 用户
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 复制前端构建产物
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# 复制后端二进制文件
COPY --from=go-builder /app/backend/main ./backend/
RUN chmod +x ./backend/main

# 复制启动脚本
COPY start-china.sh ./
RUN chmod +x start-china.sh && chown nextjs:nodejs start-china.sh

# 复制健康检查脚本
COPY healthcheck.sh ./
RUN chmod +x healthcheck.sh

# 切换到非 root 用户
USER nextjs

# 暴露端口
EXPOSE 3000 8080

# 设置环境变量
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ./healthcheck.sh

# 使用 dumb-init 作为 PID 1
ENTRYPOINT ["dumb-init", "--"]

# 启动应用
CMD ["./start-china.sh"]