# Multi-Architecture Docker Compose Configuration
# Supports both AMD64 and ARM64 architectures
version: '3.8'

services:
  # PostgreSQL 数据库 - 多架构支持
  postgres:
    image: postgres:15-alpine
    platform: linux/${TARGETARCH:-amd64}
    container_name: mibweb-postgres-multiarch
    environment:
      POSTGRES_DB: network_monitor
      POSTGRES_USER: netmon_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netmon_pass_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - mibweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netmon_user -d network_monitor"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis 缓存 - 多架构支持
  redis:
    image: redis:7-alpine
    platform: linux/${TARGETARCH:-amd64}
    container_name: mibweb-redis-multiarch
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-redis_pass_2024}
    networks:
      - mibweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_pass_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 应用服务 - 多架构构建
  app:
    build:
      context: .
      dockerfile: Dockerfile.multiarch
      platforms:
        - linux/amd64
        - linux/arm64
      args:
        - NODE_ENV=production
        - TARGETARCH=${TARGETARCH:-amd64}
    container_name: mibweb-app-multiarch
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://netmon_user:${POSTGRES_PASSWORD:-netmon_pass_2024}@postgres:5432/network_monitor
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass_2024}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
    ports:
      - "3000:3000"
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mibweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Nginx 反向代理 - 多架构支持
  nginx:
    image: nginx:alpine
    platform: linux/${TARGETARCH:-amd64}
    container_name: mibweb-nginx-multiarch
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - mibweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mibweb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16